{
  "metadata": {
    "generation_timestamp": "2024-12-28T10:00:00Z",
    "repository_head_sha": "965caea6bcca512353cdc7e4208bc9c3ceb16a0f",
    "analysis_scope": "Complete symbol inventory of all JavaScript files",
    "exclusions": ["node_modules", ".git", "test files"]
  },
  "symbol_categories": {
    "contexts": {
      "description": "React Context providers for state management",
      "symbols": [
        {
          "name": "ThemeContext",
          "type": "React.Context",
          "file": "contexts/ThemeContext.js",
          "line": 5,
          "exports": ["ThemeProvider", "useTheme"],
          "purpose": "Theme management with light/dark/adventure modes"
        },
        {
          "name": "UserContext", 
          "type": "React.Context",
          "file": "contexts/UserContext.js",
          "line": 6,
          "exports": ["UserProvider", "useUser"],
          "purpose": "User authentication and profile management"
        },
        {
          "name": "NavigationContext",
          "type": "React.Context", 
          "file": "contexts/NavigationContext.js",
          "line": 4,
          "exports": ["NavigationProvider", "useNavigation"],
          "purpose": "Navigation state and deep linking management"
        },
        {
          "name": "ExplorationContext",
          "type": "React.Context",
          "file": "contexts/ExplorationContext.js",
          "exports": ["ExplorationProvider", "useExploration"], 
          "purpose": "Discovery preferences and exploration state"
        }
      ]
    },
    "services": {
      "description": "Business logic services and external API abstractions",
      "location_services": [
        {
          "name": "BackgroundLocationService",
          "type": "Service Class",
          "file": "services/BackgroundLocationService.js",
          "key_methods": [
            "startTracking",
            "stopTracking", 
            "handleLocationUpdate",
            "getCurrentProcessedData"
          ],
          "purpose": "GPS tracking and location data processing"
        },
        {
          "name": "LocationFilter",
          "type": "Utility Service",
          "file": "services/location/LocationFilter.js",
          "purpose": "Location data filtering and validation"
        },
        {
          "name": "LocationOptimizer", 
          "type": "Utility Service",
          "file": "services/location/LocationOptimizer.js",
          "purpose": "Location data optimization for performance"
        }
      ],
      "journey_services": [
        {
          "name": "JourneyService",
          "type": "Service Class",
          "file": "services/JourneyService.js",
          "key_methods": [
            "startJourney",
            "saveJourney",
            "getJourneys",
            "deleteJourney"
          ],
          "purpose": "Journey CRUD operations and Firebase integration"
        },
        {
          "name": "JourneyCacheService",
          "type": "Service Class", 
          "file": "services/journey/JourneyCacheService.js",
          "purpose": "Journey data caching and offline support"
        },
        {
          "name": "JourneyStatsService",
          "type": "Service Class",
          "file": "services/journey/JourneyStatsService.js", 
          "purpose": "Journey statistics calculation and analytics"
        }
      ],
      "discovery_services": [
        {
          "name": "DiscoveriesService",
          "type": "Service Class",
          "file": "services/DiscoveriesService.js",
          "key_methods": [
            "searchAlongRoute",
            "savePreferences",
            "getPreferences"
          ],
          "purpose": "POI discovery and search-along-route functionality"
        },
        {
          "name": "SearchAlongRouteService",
          "type": "Service Class",
          "file": "services/SearchAlongRouteService.js",
          "purpose": "Google Places API integration for route-based discovery"
        }
      ],
      "user_data_services": [
        {
          "name": "UserProfileService",
          "type": "Service Class",
          "file": "services/UserProfileService.js",
          "key_methods": [
            "createProfile",
            "updateProfile", 
            "readProfile",
            "profileExists"
          ],
          "purpose": "User profile management in Firestore"
        },
        {
          "name": "SavedPlacesService",
          "type": "Service Class",
          "file": "services/SavedPlacesService.js",
          "key_methods": [
            "savePlace",
            "getSavedPlaces",
            "removePlace"
          ],
          "purpose": "Saved places management and Firestore integration"
        }
      ],
      "navigation_services": [
        {
          "name": "NavigationIntegrationService",
          "type": "Service Class",
          "file": "services/NavigationIntegrationService.js",
          "key_methods": [
            "registerFeature",
            "triggerJourneyNavigation",
            "getRecommendations"
          ],
          "purpose": "Navigation integration between features"
        },
        {
          "name": "NavigationErrorService",
          "type": "Service Class",
          "file": "services/NavigationErrorService.js",
          "key_methods": [
            "handleNavigationError",
            "recoverFromError",
            "trackErrorMetrics"
          ],
          "purpose": "Navigation error handling and recovery"
        }
      ]
    },
    "screens": {
      "description": "Top-level screen components",
      "symbols": [
        {
          "name": "MapScreen",
          "type": "React.Component",
          "file": "screens/MapScreen.js",
          "line": 453,
          "purpose": "Main map interface with journey tracking and discovery",
          "complexity": "High - refactored modular architecture"
        },
        {
          "name": "SignInScreen",
          "type": "React.Component", 
          "file": "screens/SignInScreen.js",
          "purpose": "User authentication interface"
        },
        {
          "name": "PastJourneysScreen",
          "type": "React.Component",
          "file": "screens/PastJourneysScreen.js", 
          "purpose": "Journey history and management"
        },
        {
          "name": "SettingsScreen",
          "type": "React.Component",
          "file": "screens/SettingsScreen.js",
          "purpose": "App settings and preferences"
        }
      ]
    },
    "hooks": {
      "description": "Custom React hooks for state management and side effects",
      "symbols": [
        {
          "name": "useMapNavigation",
          "type": "Custom Hook",
          "file": "hooks/useMapNavigation.js",
          "line": 88,
          "key_functions": [
            "navigateToJourneys",
            "navigateToDiscoveries", 
            "navigateToSavedPlaces",
            "openDrawer"
          ],
          "purpose": "Map screen navigation and routing"
        },
        {
          "name": "useSavedPlaces",
          "type": "Custom Hook",
          "file": "hooks/useSavedPlaces.js",
          "line": 442,
          "state_variables": [
            "savedPlaces",
            "visible",
            "loading",
            "error"
          ],
          "purpose": "Saved places state management and clustering"
        },
        {
          "name": "useJourneyTracking",
          "type": "Custom Hook",
          "file": "hooks/useJourneyTracking.js",
          "line": 849,
          "key_functions": [
            "toggleTracking",
            "addToPath",
            "saveJourney"
          ],
          "purpose": "Journey recording and state management"
        },
        {
          "name": "useLocationTracking",
          "type": "Custom Hook",
          "file": "hooks/useLocationTracking.js",
          "purpose": "GPS location tracking and permissions"
        },
        {
          "name": "useMapState",
          "type": "Custom Hook", 
          "file": "hooks/useMapState.js",
          "purpose": "Map state and region management"
        }
      ]
    },
    "navigation": {
      "description": "Navigation structure and routing components",
      "symbols": [
        {
          "name": "NavigationContainer",
          "type": "React.Component",
          "file": "navigation/NavigationContainer.js",
          "line": 27,
          "purpose": "Root navigation container with theme integration"
        },
        {
          "name": "MainNavigator",
          "type": "React.Component",
          "file": "navigation/MainNavigator.js", 
          "line": 19,
          "purpose": "Main drawer navigation for authenticated users"
        },
        {
          "name": "TabNavigator",
          "type": "React.Component",
          "file": "navigation/TabNavigator.js",
          "line": 27,
          "purpose": "Bottom tab navigation for core features"
        },
        {
          "name": "MapStack",
          "type": "React.Component",
          "file": "navigation/stacks/MapStack.js",
          "line": 16,
          "purpose": "Stack navigator for map-related screens"
        }
      ]
    },
    "components": {
      "description": "Reusable UI components organized by feature area",
      "map_components": [
        {
          "name": "MapRenderer",
          "type": "React.Component",
          "file": "components/map/MapRenderer.js",
          "purpose": "Map display and platform-specific rendering"
        },
        {
          "name": "MapControls",
          "type": "React.Component",
          "file": "components/map/MapControls.js",
          "purpose": "Map control buttons and layout management"
        },
        {
          "name": "TrackingButton",
          "type": "React.Component",
          "file": "components/map/TrackingButton.js",
          "purpose": "Journey tracking start/stop control"
        }
      ],
      "navigation_components": [
        {
          "name": "LoadingOverlay",
          "type": "React.Component",
          "file": "components/navigation/LoadingOverlay.js",
          "exports": [
            "LoadingOverlay",
            "FullScreenLoadingOverlay", 
            "InlineLoadingOverlay",
            "NavigationLoadingOverlay"
          ],
          "purpose": "Various loading states for navigation"
        },
        {
          "name": "NetworkErrorHandler",
          "type": "React.Component",
          "file": "components/navigation/NetworkErrorHandler.js",
          "purpose": "Network connectivity error handling"
        }
      ],
      "ui_components": [
        {
          "name": "PlaceDetailModal",
          "type": "React.Component",
          "file": "components/ui/PlaceDetailModal.js",
          "purpose": "POI detail display with theming"
        },
        {
          "name": "JourneyNamingModal",
          "type": "React.Component",
          "file": "components/ui/JourneyNamingModal.js", 
          "purpose": "Journey naming interface (needs theming)"
        }
      ]
    },
    "utilities": {
      "description": "Cross-cutting utility functions and performance monitoring",
      "performance_utilities": [
        {
          "name": "NavigationStateOptimizer",
          "type": "Utility Class",
          "file": "utils/navigationStateOptimizer.js",
          "exports": [
            "NavigationStateDebouncer",
            "useOptimizedNavigationState",
            "NavigationHistoryManager"
          ],
          "purpose": "Navigation performance optimization"
        },
        {
          "name": "PerformanceMonitor",
          "type": "Utility Class",
          "file": "utils/performanceMonitor.js",
          "line": 327,
          "key_methods": [
            "trackComponentRender",
            "trackUserInteraction",
            "generateReport"
          ],
          "purpose": "Application performance monitoring"
        }
      ],
      "data_utilities": [
        {
          "name": "Logger",
          "type": "Utility Class",
          "file": "utils/Logger.js",
          "purpose": "Centralized logging with levels and formatting"
        },
        {
          "name": "routeEncoder",
          "type": "Utility Module",
          "file": "utils/routeEncoder.js",
          "purpose": "Route data encoding and compression"
        }
      ]
    }
  },
  "import_export_analysis": {
    "most_imported_modules": [
      "React (useState, useEffect, useCallback, useMemo)",
      "React Native core components",
      "contexts/ThemeContext (useTheme)",
      "contexts/UserContext (useUser)",
      "Firebase (auth, firestore operations)",
      "utils/Logger"
    ],
    "circular_dependency_risks": [
      "contexts <-> hooks (should be one-way)",
      "services <-> contexts (currently clean)",
      "components <-> hooks (acceptable pattern)"
    ],
    "dependency_patterns": {
      "screens": "Import contexts, hooks, components, services",
      "components": "Import contexts, hooks, minimal services",
      "hooks": "Import services, contexts, utilities",
      "services": "Import Firebase, utilities, no React dependencies",
      "contexts": "Import services, utilities, React only"
    }
  },
  "code_complexity_metrics": {
    "high_complexity_files": [
      {
        "file": "hooks/useJourneyTracking.js",
        "estimated_lines": 849,
        "complexity_reason": "Journey state management, Firebase integration, error handling"
      },
      {
        "file": "hooks/useSavedPlaces.js", 
        "estimated_lines": 442,
        "complexity_reason": "Place clustering, Firebase queries, modal state"
      },
      {
        "file": "services/DiscoveriesService.js",
        "complexity_reason": "Google Places API integration, preference management"
      }
    ],
    "well_structured_files": [
      {
        "file": "contexts/ThemeContext.js",
        "reason": "Clean theme management with proper React patterns"
      },
      {
        "file": "navigation/NavigationContainer.js", 
        "reason": "Simple, focused navigation setup"
      }
    ]
  },
  "duplication_indicators": {
    "potential_duplicates": [
      {
        "pattern": "Firebase CRUD operations",
        "locations": [
          "services/JourneyService.js",
          "services/UserProfileService.js", 
          "services/SavedPlacesService.js"
        ],
        "recommendation": "Create base Firebase service class"
      },
      {
        "pattern": "Loading state management",
        "locations": [
          "Multiple hooks with useState loading patterns",
          "Loading overlay components"
        ],
        "recommendation": "Standardize loading state hook"
      },
      {
        "pattern": "Error handling patterns",
        "locations": [
          "All service classes",
          "Multiple hooks with try/catch blocks"
        ],
        "recommendation": "Centralize error handling utility"
      }
    ]
  }
}
