rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // User profiles collection
    match /users/{userId} {
      // Users can only read and write their own profile
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Additional validation for write operations
      allow write: if request.auth != null 
        && request.auth.uid == userId
        && validateUserProfile(resource, request.resource);
    }
    
    // Helper function to validate user profile data
    function validateUserProfile(existingData, newData) {
      let data = newData.data;
      
      return (
        // UID must match authenticated user
        data.uid == request.auth.uid
        
        // Required fields must be present
        && 'email' in data
        && 'displayName' in data
        && 'lastUpdated' in data
        && 'schemaVersion' in data
        && 'preferences' in data
        && 'stats' in data
        
        // Email must match authenticated user's email (if available)
        && (request.auth.token.email == null || data.email == request.auth.token.email)
        
        // Schema version must be valid
        && data.schemaVersion is number
        && data.schemaVersion >= 1.0
        
        // Preferences validation
        && validatePreferences(data.preferences)
        
        // Stats validation
        && validateStats(data.stats)
        
        // Social profile validation (if present)
        && (!('socialProfile' in data) || validateSocialProfile(data.socialProfile))
        
        // Gamification validation (if present)
        && (!('gamification' in data) || validateGamification(data.gamification))
      );
    }
    
    // Validate preferences structure
    function validatePreferences(preferences) {
      return (
        preferences is map
        && 'notifications' in preferences
        && preferences.notifications is bool
        && 'privacy' in preferences
        && preferences.privacy in ['public', 'friends', 'private']
        && 'units' in preferences
        && preferences.units in ['metric', 'imperial']
        && 'discoveryPreferences' in preferences
        && validateDiscoveryPreferences(preferences.discoveryPreferences)
        && 'theme' in preferences
        && preferences.theme in ['light', 'dark', 'auto']
        && 'mapStyle' in preferences
        && preferences.mapStyle in ['default', 'satellite', 'terrain']
      );
    }
    
    // Validate discovery preferences
    function validateDiscoveryPreferences(discoveryPrefs) {
      return (
        discoveryPrefs is map
        && 'categories' in discoveryPrefs
        && discoveryPrefs.categories is list
        && 'radius' in discoveryPrefs
        && discoveryPrefs.radius is number
        && discoveryPrefs.radius >= 100
        && discoveryPrefs.radius <= 10000
        && 'autoPing' in discoveryPrefs
        && discoveryPrefs.autoPing is bool
      );
    }
    
    // Validate stats structure
    function validateStats(stats) {
      return (
        stats is map
        && 'totalWalks' in stats
        && stats.totalWalks is number
        && stats.totalWalks >= 0
        && 'totalDistance' in stats
        && stats.totalDistance is number
        && stats.totalDistance >= 0
        && 'totalTime' in stats
        && stats.totalTime is number
        && stats.totalTime >= 0
        && 'discoveries' in stats
        && stats.discoveries is number
        && stats.discoveries >= 0
        && 'totalPings' in stats
        && stats.totalPings is number
        && stats.totalPings >= 0
        && 'averageWalkDistance' in stats
        && stats.averageWalkDistance is number
        && stats.averageWalkDistance >= 0
        && 'longestWalk' in stats
        && stats.longestWalk is number
        && stats.longestWalk >= 0
        && 'favoriteDiscoveryTypes' in stats
        && stats.favoriteDiscoveryTypes is list
      );
    }
    
    // Validate social profile structure
    function validateSocialProfile(socialProfile) {
      return (
        socialProfile is map
        && 'username' in socialProfile
        && socialProfile.username is string
        && 'socialLinks' in socialProfile
        && socialProfile.socialLinks is map
        && 'followers' in socialProfile
        && socialProfile.followers is list
        && 'following' in socialProfile
        && socialProfile.following is list
        && 'isPublicProfile' in socialProfile
        && socialProfile.isPublicProfile is bool
      );
    }
    
    // Validate gamification structure
    function validateGamification(gamification) {
      return (
        gamification is map
        && 'level' in gamification
        && gamification.level is number
        && gamification.level >= 1
        && 'experience' in gamification
        && gamification.experience is number
        && gamification.experience >= 0
        && 'achievements' in gamification
        && gamification.achievements is list
        && 'badges' in gamification
        && gamification.badges is list
        && 'totalPings' in gamification
        && gamification.totalPings is number
        && gamification.totalPings >= 0
        && 'totalDiscoveries' in gamification
        && gamification.totalDiscoveries is number
        && gamification.totalDiscoveries >= 0
        && 'streakDays' in gamification
        && gamification.streakDays is number
        && gamification.streakDays >= 0
      );
    }
    
    // User subcollections - users can only access their own data
    match /users/{userId}/{subcollection}/{docId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Top-level collections (if any services use them)
    match /journeys/{journeyId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    match /savedPlaces/{placeId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    match /discoveries/{discoveryId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Default deny rule for all other documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}